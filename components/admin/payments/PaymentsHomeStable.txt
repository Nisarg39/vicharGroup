"use client"
import { paymentDetails, searchStudentPayments} from "../../../server_actions/actions/adminActions"
import { useState, useEffect } from "react"
import LoadingSpinner from "../../common/LoadingSpinner"

function PaymentDetails({ payment, onClose }) {
    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-[9999]">
            <div className="bg-white p-4 sm:p-8 rounded-2xl shadow-2xl max-w-2xl w-full mx-4 border border-gray-100 max-h-[90vh] overflow-y-auto">
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl sm:text-2xl font-bold text-gray-900">Payment Details</h2>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-700 transition-colors duration-200 flex-shrink-0 ml-4">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div className="space-y-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Student Name</p>
                            <p className="text-base font-semibold text-gray-900">{payment.student?.name}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Student Email</p>
                            <p className="text-base font-semibold text-gray-900">{payment.student?.email}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Product Name</p>
                            <p className="text-base font-semibold text-gray-900">{payment.product?.name}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Product Type</p>
                            <p className="text-base font-semibold text-gray-900">{payment.product?.type}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Amount Paid</p>
                            <p className="text-base font-semibold text-green-600">â‚¹ {payment.amountPaid}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Payment Date</p>
                            <p className="text-base font-semibold text-gray-900">{new Date(payment.createdAt).toLocaleString()}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Razorpay Order ID</p>
                            <p className="text-base font-semibold text-gray-900">{payment.razorpay_info?.razorpay_order_id}</p>
                        </div>
                        <div className="p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Razorpay Payment ID</p>
                            <p className="text-base font-semibold text-gray-900">{payment.razorpay_info?.razorpay_payment_id}</p>
                        </div>
                        <div className="col-span-2 p-4 bg-gray-50 rounded-xl">
                            <p className="text-sm font-medium text-gray-500">Razorpay Signature</p>
                            <p className="text-base font-semibold text-gray-900 break-all">{payment.razorpay_info?.razorpay_signature}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default function PaymentsHome(){
    const [payments, setPayments] = useState([])
    const [loading, setLoading] = useState(true)
    const [currentPage, setCurrentPage] = useState(1)
    const [paymentsPerPage] = useState(10)
    const [selectedPayment, setSelectedPayment] = useState(null)
    const [totalPages, setTotalPages] = useState(0)
    const [totalCount, setTotalCount] = useState(0)
    const [searchQuery, setSearchQuery] = useState("")

    const handleSearchChange = async(e) => {
        const query = e.target.value
        setSearchQuery(query)
        // console.log(query)
        console.log(await searchStudentPayments(query))
    }

    async function fetchPayments(){
        try {
            setLoading(true)
            const data = await paymentDetails(currentPage, paymentsPerPage)
            if (!data || !data.success) {
                setPayments([])
                setTotalPages(0)
                setTotalCount(0)
            } else {
                setPayments(data.payments)
                setTotalPages(data.totalPages)
                setTotalCount(data.totalCount)
            }
        } catch (error) {
            console.error("Error fetching payments:", error)
            alert("Error fetching payments")
            setPayments([])
            setTotalPages(0)
            setTotalCount(0)
        } finally {
            setLoading(false)
        }
    }
    
    useEffect(() => {
        fetchPayments()
    }, [currentPage])

    const paginate = (pageNumber) => {
        if (pageNumber >= 1 && pageNumber <= totalPages) {
            setCurrentPage(pageNumber)
        }
    }

    // Generate page numbers for pagination
    const getPageNumbers = () => {
        const pageNumbers = []
        const maxVisiblePages = 5
        
        if (totalPages <= maxVisiblePages) {
            for (let i = 1; i <= totalPages; i++) {
                pageNumbers.push(i)
            }
        } else {
            const startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2))
            const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1)
            
            if (startPage > 1) {
                pageNumbers.push(1)
                if (startPage > 2) pageNumbers.push('...')
            }
            
            for (let i = startPage; i <= endPage; i++) {
                pageNumbers.push(i)
            }
            
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) pageNumbers.push('...')
                pageNumbers.push(totalPages)
            }
        }
        
        return pageNumbers
    }

    if(loading){
        return (
            <div className="mt-28 flex justify-center items-center">
                <LoadingSpinner />
            </div>
        )
    }

    if(payments.length === 0) {
        return (
            <div className="p-8 bg-white rounded-2xl shadow-xl max-w-4xl mx-auto border border-gray-100">
                <h1 className="text-3xl font-bold text-gray-900 mb-8">Payment History</h1>
                <div className="text-center py-12 bg-gray-50 rounded-xl border border-gray-200">
                    <p className="text-gray-600 text-lg">No payments have been recorded yet</p>
                </div>
            </div>
        )
    }

    return (
        <div className="p-8 bg-white rounded-2xl shadow-xl max-w-7xl mx-auto border border-gray-100">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
                <h1 className="text-3xl font-bold text-gray-900">Payment History</h1>
                <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                    <div className="relative">
                        <input
                            type="text"
                            placeholder="Search payments..."
                            value={searchQuery}
                            onChange={handleSearchChange}
                            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-all duration-200 w-64"
                        />
                        <svg className="absolute right-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <div className="text-gray-600 bg-gray-50 px-4 py-2 rounded-lg font-medium">
                        Total Payments: {totalCount}
                    </div>
                </div>
            </div>
            
            {/* Pagination Info */}
            <div className="mb-4 text-sm text-gray-600">
                Showing {((currentPage - 1) * paymentsPerPage) + 1} to {Math.min(currentPage * paymentsPerPage, totalCount)} of {totalCount} payments
            </div>

            <div className="overflow-x-auto rounded-xl border border-gray-200 shadow-sm">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Sr.No</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Student Name</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Product Name</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Product Type</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Amount Paid</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Payment Date</th>
                            <th className="px-6 py-4 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {payments.map((payment, index) => (
                            <tr key={payment._id || index} className="hover:bg-gray-50 transition-colors duration-150">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-700">
                                    {((currentPage - 1) * paymentsPerPage) + index + 1}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-700">
                                    {payment.student?.name || 'N/A'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                    {payment.product?.name || 'N/A'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                    <span className="px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        {payment.product?.type || 'N/A'}
                                    </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                                    â‚¹ {payment.amountPaid}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                    {new Date(payment.createdAt).toLocaleDateString()}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                                    <button
                                        onClick={() => setSelectedPayment(payment)}
                                        className="px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-all duration-200 border border-blue-100 hover:border-blue-200"
                                    >
                                        View Details
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Pagination Controls */}
            {totalPages > 1 && (
                <div className="flex justify-center items-center mt-8 space-x-2">
                    <button
                        onClick={() => paginate(currentPage - 1)}
                        disabled={currentPage === 1}
                        className="px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 bg-white text-gray-700 hover:bg-gray-50 border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-sm"
                    >
                        Previous
                    </button>
                    
                    {getPageNumbers().map((pageNumber, index) => (
                        <button
                            key={index}
                            onClick={() => typeof pageNumber === 'number' ? paginate(pageNumber) : null}
                            disabled={pageNumber === '...'}
                            className={`px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 ${
                                pageNumber === currentPage 
                                ? 'bg-blue-600 text-white shadow-md hover:bg-blue-700' 
                                : pageNumber === '...'
                                ? 'bg-white text-gray-400 cursor-default'
                                : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-300 hover:shadow-sm'
                            }`}
                        >
                            {pageNumber}
                        </button>
                    ))}
                    
                    <button
                        onClick={() => paginate(currentPage + 1)}
                        disabled={currentPage === totalPages}
                        className="px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 bg-white text-gray-700 hover:bg-gray-50 border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-sm"
                    >
                        Next
                    </button>
                </div>
            )}

            {selectedPayment && (
                <PaymentDetails 
                    payment={selectedPayment} 
                    onClose={() => setSelectedPayment(null)} 
                />
            )}
        </div>
    )
}
